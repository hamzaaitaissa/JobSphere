// <auto-generated />
using System;
using JobSphere.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobSphere.Migrations
{
    [DbContext(typeof(JobSphereContext))]
    [Migration("20250403113202_seedingTags")]
    partial class seedingTags
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobSphere.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("JobSphere.Entities.JobTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("TagId");

                    b.ToTable("jobTags");
                });

            modelBuilder.Entity("JobSphere.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 3, 11, 32, 1, 527, DateTimeKind.Utc).AddTicks(1998),
                            Title = "Software Development"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 3, 11, 32, 1, 527, DateTimeKind.Utc).AddTicks(2360),
                            Title = "Marketing"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 4, 3, 11, 32, 1, 527, DateTimeKind.Utc).AddTicks(2361),
                            Title = "Remote"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 4, 3, 11, 32, 1, 527, DateTimeKind.Utc).AddTicks(2362),
                            Title = "Finance"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 4, 3, 11, 32, 1, 527, DateTimeKind.Utc).AddTicks(2363),
                            Title = "Sales"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 4, 3, 11, 32, 1, 527, DateTimeKind.Utc).AddTicks(2363),
                            Title = "Healthcare"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 4, 3, 11, 32, 1, 527, DateTimeKind.Utc).AddTicks(2364),
                            Title = "Customer Support"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 4, 3, 11, 32, 1, 527, DateTimeKind.Utc).AddTicks(2365),
                            Title = "Project Management"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 4, 3, 11, 32, 1, 527, DateTimeKind.Utc).AddTicks(2365),
                            Title = "Engineering"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 4, 3, 11, 32, 1, 527, DateTimeKind.Utc).AddTicks(2366),
                            Title = "Education"
                        });
                });

            modelBuilder.Entity("JobSphere.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JobSphere.Entities.Job", b =>
                {
                    b.HasOne("JobSphere.Entities.User", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("JobSphere.Entities.JobTag", b =>
                {
                    b.HasOne("JobSphere.Entities.Job", "Job")
                        .WithMany("JobTags")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSphere.Entities.Tag", "Tag")
                        .WithMany("JobTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("JobSphere.Entities.Job", b =>
                {
                    b.Navigation("JobTags");
                });

            modelBuilder.Entity("JobSphere.Entities.Tag", b =>
                {
                    b.Navigation("JobTags");
                });
#pragma warning restore 612, 618
        }
    }
}
